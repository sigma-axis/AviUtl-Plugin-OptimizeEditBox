name: Draft Release
on:
  workflow_dispatch:
  push:
    tags:
    - '*'

env:
  SOLUTION_NAME: OptimizeEditBox
  # Path to the solution file relative to the root of the project.

  ARTIFACT_NAME: OptimizeEditBox_{0}
  ZIP_ITEM_NAME: OptimizeEditBox.{0}-{1}_{2}.zip
  ZIP_NAME: OptimizeEditBox.{0}.zip
  RELEASE_NAME: エディットボックス最適化 {0} 改造版 r_

permissions:
  contents: read

jobs:
  build:
    name: build solution
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Release]
        platform: [x86]
        include:
        - directory: _bin/

    outputs:
      asset-count: ${{ steps.matrix-info.outputs.asset-count }}
      artifact: ${{ steps.format-names.outputs.artifact }}
      zip: ${{ steps.format-names.outputs.zip }}
      release: ${{ steps.format-names.outputs.release }}

    steps:
    - name: Matrix info
      id: matrix-info
      # if: strategy.job-index == 0
      shell: bash
      run: echo "asset-count=${{ strategy.job-total }}" >> $GITHUB_OUTPUT

    - name: Format names
      id: format-names
      shell: bash
      # pwsh or cmd didn't work for saving variables to outputs.
      # (in which case I should have done with ${env:GITHUB_OUTPUT} or %GITHUB_PATH%.)
      run: |
        echo "artifact=${{ format(env.ARTIFACT_NAME, github.ref_name) }}" >> $GITHUB_OUTPUT
        echo "zip_item=${{ format(env.ZIP_ITEM_NAME, github.ref_name, matrix.configuration, matrix.platform) }}" >> $GITHUB_OUTPUT
        echo "zip=${{ format(env.ZIP_NAME, github.ref_name) }}" >> $GITHUB_OUTPUT
        echo "release=${{ format(env.RELEASE_NAME, github.ref_name) }}" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    # - name: Restore NuGet packages
    #   working-directory: ${{ github.workspace }}
    #   run: nuget restore ${{ env.SOLUTION_NAME }}.sln

    - name: Build
      working-directory: ${{ github.workspace }}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} ${{ env.SOLUTION_NAME }}.sln

    - name: Pack into a folder
      run: |
        mkdir pack
        copy ${{ matrix.directory }}*.auf pack
        copy OptimizeEditBox/*.ini pack
        copy *.md pack
        copy LICENSE pack
      # pick up and add any files you may need.

    - name: Compress (for matrix)
      if: strategy.job-total > 1
      run: Compress-Archive -Force pack/* pack/${{ steps.format-names.outputs.zip_item }}

    - name: Upload the build as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.format-names.outputs.artifact }}
        path: ${{ strategy.job-total > 1 && 'pack/*.zip' || 'pack/*' }}

  release:
    name: draft release
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.artifact }}
        path: artifacts

    - name: compress
      if: ${{ needs.build.outputs.asset-count == 1 }}
      run: |
        cd artifacts
        zip -r ${{ needs.build.outputs.zip }} *

    - name: Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: true
        name: ${{ needs.build.outputs.release }}
        files: artifacts/*.zip
        body: DRAFT for ${{ needs.build.outputs.release }}.
